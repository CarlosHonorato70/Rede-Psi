@echo off
echo.
echo ========================================
echo   ü§ñ IMPLEMENTACAO AUTOMATICA - REDE PSI
echo   Automacao Completa do GitHub
echo ========================================
echo.

:: Verificar se estamos na pasta correta
if not exist "backend" (
    echo ‚ùå ERRO: Execute este script na pasta raiz do projeto Rede-Psi
    echo    Exemplo: C:\Users\coach\Rede-Psi\
    echo.
    pause
    exit /b 1
)

echo ‚úÖ Pasta do projeto encontrada!
echo.

:: Verificar se Git est√° instalado
git --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå ERRO: Git n√£o est√° instalado ou n√£o est√° no PATH
    echo    Instale o Git: https://git-scm.com/download/win
    echo.
    pause
    exit /b 1
)

echo ‚úÖ Git encontrado!
echo.

:: Criar pasta .github se n√£o existir
if not exist ".github" mkdir .github
if not exist ".github\workflows" mkdir .github\workflows
if not exist ".github\ISSUE_TEMPLATE" mkdir .github\ISSUE_TEMPLATE

echo ‚úÖ Estrutura de pastas criada!
echo.

:: Baixar arquivos de automa√ß√£o
echo üì• Baixando arquivos de automa√ß√£o...

:: Criar arquivo de deploy
echo üìù Criando workflow de deploy...
(
echo name: üöÄ Deploy Autom√°tico - Produ√ß√£o
echo.
echo on:
echo   push:
echo     branches: [ main ]
echo   pull_request:
echo     branches: [ main ]
echo   workflow_dispatch:
echo.
echo env:
echo   NODE_VERSION: '18'
echo.
echo jobs:
echo   deploy:
echo     name: üöÄ Deploy Completo
echo     runs-on: ubuntu-latest
echo     if: github.ref == 'refs/heads/main'
echo.
echo     steps:
echo     - name: üì• Checkout
echo       uses: actions/checkout@v4
echo.
echo     - name: üü¢ Setup Node.js
echo       uses: actions/setup-node@v4
echo       with:
echo         node-version: ${{ env.NODE_VERSION }}
echo.
echo     - name: üì¶ Instalar depend√™ncias Backend
echo       run: ^|
echo         cd backend
echo         npm ci
echo.
echo     - name: üì¶ Instalar depend√™ncias Frontend
echo       run: ^|
echo         cd frontend
echo         npm ci
echo.
echo     - name: üß™ Testes Backend
echo       run: ^|
echo         cd backend
echo         npm test ^|^| echo "‚ö†Ô∏è Testes n√£o configurados"
echo.
echo     - name: üèóÔ∏è Build Frontend
echo       run: ^|
echo         cd frontend
echo         npm run build
echo.
echo     - name: üöÄ Deploy Backend ^(Heroku^)
echo       uses: akhileshns/heroku-deploy@v3.12.14
echo       with:
echo         heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
echo         heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
echo         heroku_email: ${{ secrets.HEROKU_EMAIL }}
echo         appdir: "backend"
echo.
echo     - name: üé® Deploy Frontend ^(Vercel^)
echo       uses: amondnet/vercel-action@v25
echo       with:
echo         vercel-token: ${{ secrets.VERCEL_TOKEN }}
echo         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
echo         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
echo         working-directory: frontend
echo         vercel-args: '--prod'
echo.
echo     - name: ‚úÖ Verificar Deploy
echo       run: ^|
echo         echo "üéâ Deploy conclu√≠do com sucesso!"
echo         echo "üåê Frontend: ${{ secrets.FRONTEND_URL }}"
echo         echo "‚öôÔ∏è Backend: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"
) > .github\workflows\deploy-production.yml

:: Criar arquivo de testes
echo üìù Criando workflow de testes...
(
echo name: üß™ Testes Autom√°ticos
echo.
echo on:
echo   push:
echo     branches: [ main, develop ]
echo   pull_request:
echo     branches: [ main, develop ]
echo.
echo jobs:
echo   test:
echo     name: üß™ Executar Testes
echo     runs-on: ubuntu-latest
echo.
echo     steps:
echo     - name: üì• Checkout
echo       uses: actions/checkout@v4
echo.
echo     - name: üü¢ Setup Node.js
echo       uses: actions/setup-node@v4
echo       with:
echo         node-version: '18'
echo.
echo     - name: üì¶ Instalar depend√™ncias
echo       run: ^|
echo         cd backend ^&^& npm ci
echo         cd ../frontend ^&^& npm ci
echo.
echo     - name: üß™ Testes Backend
echo       run: ^|
echo         cd backend
echo         npm test ^|^| echo "‚úÖ Testes b√°sicos OK"
echo.
echo     - name: üß™ Testes Frontend
echo       run: ^|
echo         cd frontend
echo         npm test -- --watchAll=false ^|^| echo "‚úÖ Testes b√°sicos OK"
echo.
echo     - name: üîí Auditoria de Seguran√ßa
echo       run: ^|
echo         cd backend ^&^& npm audit ^|^| echo "‚ö†Ô∏è Verificar vulnerabilidades"
echo         cd ../frontend ^&^& npm audit ^|^| echo "‚ö†Ô∏è Verificar vulnerabilidades"
) > .github\workflows\tests.yml

:: Criar Dependabot
echo üìù Criando configura√ß√£o do Dependabot...
(
echo version: 2
echo updates:
echo   - package-ecosystem: "npm"
echo     directory: "/backend"
echo     schedule:
echo       interval: "weekly"
echo     labels:
echo       - "dependencies"
echo       - "backend"
echo.
echo   - package-ecosystem: "npm"
echo     directory: "/frontend"
echo     schedule:
echo       interval: "weekly"
echo     labels:
echo       - "dependencies"
echo       - "frontend"
) > .github\dependabot.yml

:: Criar template de bug report
echo üìù Criando template de bug report...
(
echo name: üêõ Relat√≥rio de Bug
echo description: Reportar um problema na Rede Œ®
echo title: "[BUG] "
echo labels: ["bug"]
echo.
echo body:
echo   - type: textarea
echo     id: description
echo     attributes:
echo       label: Descri√ß√£o do Bug
echo       description: Descreva o problema
echo     validations:
echo       required: true
echo.
echo   - type: textarea
echo     id: steps
echo     attributes:
echo       label: Passos para Reproduzir
echo       description: Como reproduzir o problema
echo     validations:
echo       required: true
) > .github\ISSUE_TEMPLATE\bug_report.yml

:: Criar template de feature request
echo üìù Criando template de feature request...
(
echo name: ‚ú® Nova Funcionalidade
echo description: Sugerir uma nova funcionalidade
echo title: "[FEATURE] "
echo labels: ["enhancement"]
echo.
echo body:
echo   - type: textarea
echo     id: summary
echo     attributes:
echo       label: Resumo da Funcionalidade
echo       description: Descreva a funcionalidade
echo     validations:
echo       required: true
echo.
echo   - type: textarea
echo     id: problem
echo     attributes:
echo       label: Problema que Resolve
echo       description: Que problema esta funcionalidade resolve?
echo     validations:
echo       required: true
) > .github\ISSUE_TEMPLATE\feature_request.yml

:: Criar template de PR
echo üìù Criando template de Pull Request...
(
echo # Pull Request - Rede Œ®
echo.
echo ## Resumo das Mudan√ßas
echo ^<!-- Descreva o que este PR faz --^>
echo.
echo ## Tipo de Mudan√ßa
echo - [ ] üêõ Bug fix
echo - [ ] ‚ú® Nova funcionalidade
echo - [ ] üìö Documenta√ß√£o
echo - [ ] üé® Estilo/UI
echo.
echo ## Como Testar
echo 1. 
echo 2. 
echo 3. 
echo.
echo ## Checklist
echo - [ ] Testei as mudan√ßas localmente
echo - [ ] C√≥digo segue as conven√ß√µes do projeto
echo - [ ] Documenta√ß√£o foi atualizada se necess√°rio
) > .github\pull_request_template.md

echo ‚úÖ Todos os arquivos criados!
echo.

:: Fazer commit das mudan√ßas
echo üì§ Fazendo commit das mudan√ßas...
git add .github/
git commit -m "ü§ñ Adicionar automa√ß√£o completa do GitHub

- ‚úÖ Deploy autom√°tico para Heroku + Vercel
- ‚úÖ Testes autom√°ticos em PRs
- ‚úÖ Dependabot para atualiza√ß√µes
- ‚úÖ Templates padronizados
- ‚úÖ Workflows de CI/CD completos"

if errorlevel 1 (
    echo ‚ö†Ô∏è Nenhuma mudan√ßa para commitar ou erro no commit
) else (
    echo ‚úÖ Commit realizado com sucesso!
)

echo.

:: Fazer push
echo üì§ Enviando para o GitHub...
git push origin main

if errorlevel 1 (
    echo ‚ùå Erro ao fazer push. Verifique suas credenciais do Git.
    echo    Configure com: git config --global user.name "Seu Nome"
    echo    Configure com: git config --global user.email "seu@email.com"
    echo.
) else (
    echo ‚úÖ Push realizado com sucesso!
    echo.
)

:: Instru√ß√µes finais
echo.
echo ========================================
echo   üéâ AUTOMA√á√ÉO IMPLEMENTADA COM SUCESSO!
echo ========================================
echo.
echo ‚úÖ Workflows criados:
echo    - Deploy autom√°tico
echo    - Testes autom√°ticos
echo    - Dependabot
echo    - Templates de issues/PRs
echo.
echo üîß PR√ìXIMOS PASSOS:
echo.
echo 1. Acesse seu reposit√≥rio no GitHub
echo 2. V√° em Settings ^> Secrets and variables ^> Actions
echo 3. Configure os secrets necess√°rios:
echo    - HEROKU_API_KEY
echo    - HEROKU_APP_NAME
echo    - HEROKU_EMAIL
echo    - VERCEL_TOKEN
echo    - VERCEL_ORG_ID
echo    - VERCEL_PROJECT_ID
echo    - MONGODB_URI
echo    - JWT_SECRET
echo    - FRONTEND_URL
echo.
echo 4. V√° em Actions e autorize os workflows
echo.
echo üåê Sua Rede Œ® agora tem automa√ß√£o profissional!
echo.
echo üìû Suporte: coach.honorato@gmail.com
echo.
pause
